{"version":3,"file":"js/362.257dcaf2.js","mappings":"ufAkEA,MAAMA,EAAa,CACjB,QAAS,OAAQ,UAAW,UAC5B,QAAS,SAAU,MAAO,MAC1B,OAAQ,OAAQ,OAAQ,MACxB,OAAQ,OAAQ,OAAQ,QACxB,QAAS,OAAQ,WAAY,YAGzBC,GAAWC,EAAAA,EAAAA,IAAI,SACfC,GAASD,EAAAA,EAAAA,IAAI,IACbE,GAAYF,EAAAA,EAAAA,KAAI,GAChBG,GAAkBH,EAAAA,EAAAA,IAAI,MAC5B,IAAII,EAAW,KAGf,MAAMC,EAAyBC,GACtBA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,MAAM,GAGjDC,EAAgBC,GACb,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAM,IAAIC,MAChBD,EAAIE,OAAS,IAAMJ,EAAQF,GAC3BI,EAAIG,QAAU,IAAMJ,EAAOH,GAC3BI,EAAII,IAAMR,CAAG,IAKXS,EAAcC,UAClB,IAAInB,EAAUoB,MAAd,CAEApB,EAAUoB,OAAQ,EAClB,IAEE,MAAMC,EAAgBC,MAAM,IAAIC,OAAOC,KAAIL,UACzC,MAAMM,QAAiBC,MAAM,8BAA8B7B,EAASuB,SAC9DO,QAAaF,EAASG,OAC5B,OAAOD,EAAKlB,GAAG,IAGXoB,QAAkBnB,QAAQoB,IAAIT,GAC9BU,QAAwBrB,QAAQsB,WAClCH,EAAUL,KAAIf,GAAOD,EAAaC,MAGhCwB,EAAcF,EACfG,QAAOC,GAA4B,cAAlBA,EAAOC,SACxBZ,KAAIW,GAAUA,EAAOf,QACrBc,QAAOzB,IAAQV,EAAOqB,MAAMiB,SAAS5B,KAGpC6B,EAAkBL,EAAYC,QAAOzB,IAAQV,EAAOqB,MAAMiB,SAAS5B,KAEzEV,EAAOqB,MAAQ,IAAIrB,EAAOqB,SAAUkB,EACtC,CAAE,MAAOC,GACPC,QAAQD,MAAM,0BAA2BA,EAC3C,CAAE,QACAvC,EAAUoB,OAAQ,EAClBqB,GACF,CA9B2B,CA8B3B,EAIIC,EAAcA,KAClB3C,EAAOqB,MAAQ,GACfF,GAAa,EAITyB,EAAqBlC,IACzBmC,OAAOC,KAAKpC,EAAK,SAAS,EAItBqC,EAAmBC,IACvB,MAAMlC,EAAMkC,EAAMC,OACZC,EAAUpC,EAAIqC,QAAQ,iBACxBD,IACFA,EAAQE,MAAMC,QAAU,IAC1B,EAIIC,EAAoBN,IACxBA,EAAMC,OAAO/B,IAAM,2BACnB8B,EAAMC,OAAOM,IAAM,QAAQ,EAIvBb,EAA4BA,KAChCvC,EAAW,IAAIqD,sBACZC,IACKA,EAAQ,GAAGC,iBAAmBzD,EAAUoB,OAC1CF,GACF,GAEF,CACEwC,KAAMC,SAASC,KACfC,UAAW,EACXC,WAAY,UAGZ7D,EAAgBmB,OAClBlB,EAAS6D,QAAQ9D,EAAgBmB,MACnC,E,OAKF4C,EAAAA,EAAAA,KAAU,KACR9C,IACAuB,GAA2B,KAI7BwB,EAAAA,EAAAA,KAAY,KACN/D,GAAYD,EAAgBmB,OAC9BlB,EAASgE,UAAUjE,EAAgBmB,MACrC,I,6hCCnLF,MAAM+C,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://my-github-page/./src/components/tools/AnimeImageTool.vue","webpack://my-github-page/./src/components/tools/AnimeImageTool.vue?82cd"],"sourcesContent":["<template>\r\n  <div class=\"anime-image-tool\">\r\n    <div class=\"category-selector\">\r\n      <label for=\"category-select\" class=\"sr-only\">选择动漫图片类别</label>\r\n      选择动漫图片类别：\r\n      <select \r\n        id=\"category-select\"\r\n        v-model=\"category\" \r\n        @change=\"resetImages\"\r\n        class=\"category-dropdown\"\r\n      >\r\n        <option \r\n          v-for=\"cat in categories\" \r\n          :key=\"cat\" \r\n          :value=\"cat\"\r\n        >\r\n          {{ capitalizeFirstLetter(cat) }}\r\n        </option>\r\n      </select>\r\n    </div>\r\n\r\n    <div class=\"masonry-grid\">\r\n      <div \r\n        v-for=\"(imageUrl, index) in images\" \r\n        :key=\"`${imageUrl}-${index}`\" \r\n        class=\"masonry-item\"\r\n      >\r\n        <div class=\"image-wrapper\">\r\n          <img \r\n            :src=\"imageUrl\" \r\n            :alt=\"`Anime ${category} ${index}`\"\r\n            loading=\"lazy\"\r\n            class=\"image\"\r\n            @error=\"handleImageError\"\r\n            @load=\"handleImageLoad\"\r\n          />\r\n          <div class=\"image-overlay\">\r\n            <button \r\n              @click=\"openOriginalImage(imageUrl)\" \r\n              class=\"original-image-button\"\r\n            >\r\n              打开原图\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div \r\n      v-if=\"isLoading\" \r\n      class=\"loading-container\"\r\n    >\r\n      <div class=\"loading-spinner\"></div>\r\n    </div>\r\n\r\n    <div \r\n      ref=\"loadMoreTrigger\" \r\n      class=\"load-more-trigger\"\r\n    ></div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, onUnmounted } from 'vue'\r\n\r\n// Categories available on waifu.pics\r\nconst categories = [\r\n  'waifu', 'neko', 'shinobu', 'megumin', \r\n  'bully', 'cuddle', 'cry', 'hug', \r\n  'awoo', 'kiss', 'lick', 'pat', \r\n  'smug', 'bonk', 'yeet', 'blush', \r\n  'smile', 'wave', 'highfive', 'handhold'\r\n]\r\n\r\nconst category = ref('waifu')\r\nconst images = ref([])\r\nconst isLoading = ref(false)\r\nconst loadMoreTrigger = ref(null)\r\nlet observer = null\r\n\r\n// Capitalize first letter of a string\r\nconst capitalizeFirstLetter = (string) => {\r\n  return string.charAt(0).toUpperCase() + string.slice(1)\r\n}\r\n\r\nconst preloadImage = (url) => {\r\n  return new Promise((resolve, reject) => {\r\n    const img = new Image()\r\n    img.onload = () => resolve(url)\r\n    img.onerror = () => reject(url)\r\n    img.src = url\r\n  })\r\n}\r\n\r\n// Fetch images from API\r\nconst fetchImages = async () => {\r\n  if (isLoading.value) return\r\n\r\n  isLoading.value = true\r\n  try {\r\n    // 减少单次加载数量，使滚动更流畅\r\n    const imagePromises = Array(10).fill().map(async () => {\r\n      const response = await fetch(`https://api.waifu.pics/sfw/${category.value}`)\r\n      const data = await response.json()\r\n      return data.url\r\n    })\r\n\r\n    const newImages = await Promise.all(imagePromises)\r\n    const preloadedImages = await Promise.allSettled(\r\n        newImages.map(url => preloadImage(url))\r\n    )\r\n\r\n    const validImages = preloadedImages\r\n        .filter(result => result.status === 'fulfilled')\r\n        .map(result => result.value)\r\n        .filter(url => !images.value.includes(url))\r\n\r\n    // 过滤掉重复的图片URL\r\n    const uniqueNewImages = validImages.filter(url => !images.value.includes(url))\r\n\r\n    images.value = [...images.value, ...uniqueNewImages]\r\n  } catch (error) {\r\n    console.error('Failed to fetch images:', error)\r\n  } finally {\r\n    isLoading.value = false\r\n    setupIntersectionObserver()\r\n  }\r\n}\r\n\r\n// Reset images when category changes\r\nconst resetImages = () => {\r\n  images.value = []\r\n  fetchImages()\r\n}\r\n\r\n// Open original image in new tab\r\nconst openOriginalImage = (url) => {\r\n  window.open(url, '_blank')\r\n}\r\n\r\n// 添加图片加载处理\r\nconst handleImageLoad = (event) => {\r\n  const img = event.target\r\n  const wrapper = img.closest('.masonry-item')\r\n  if (wrapper) {\r\n    wrapper.style.opacity = '1'\r\n  }\r\n}\r\n\r\n// Handle image load error\r\nconst handleImageError = (event) => {\r\n  event.target.src = '/api/placeholder/300/300'\r\n  event.target.alt = '图片加载错误'\r\n}\r\n\r\n// Setup intersection observer for infinite scroll\r\nconst setupIntersectionObserver = () => {\r\n  observer = new IntersectionObserver(\r\n    (entries) => {\r\n      if (entries[0].isIntersecting && !isLoading.value) {\r\n        fetchImages()\r\n      }\r\n    },\r\n    { \r\n      root: document.body, // 指定滚动容器\r\n      threshold: 1,\r\n      rootMargin: '200px'\r\n    }\r\n  )\r\n  if (loadMoreTrigger.value) {\r\n    observer.observe(loadMoreTrigger.value)\r\n  }\r\n}\r\n\r\n\r\n// Initial fetch and observer setup\r\nonMounted(() => {\r\n  fetchImages();\r\n  setupIntersectionObserver();\r\n})\r\n\r\n// Cleanup observer\r\nonUnmounted(() => {\r\n  if (observer && loadMoreTrigger.value) {\r\n    observer.unobserve(loadMoreTrigger.value)\r\n  }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.anime-image-tool {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\n.category-selector {\r\n  margin-bottom: 20px;\r\n  text-align: center;\r\n}\r\n\r\n.category-dropdown {\r\n  width: 100%;\r\n  max-width: 300px;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  font-size: 16px;\r\n}\r\n\r\n.sr-only {\r\n  position: absolute;\r\n  width: 1px;\r\n  height: 1px;\r\n  padding: 0;\r\n  margin: -1px;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0);\r\n  white-space: nowrap;\r\n  border: 0;\r\n}\r\n\r\n.image-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 20px;\r\n}\r\n\r\n/* 添加图片加载动画 */\r\n@keyframes fadeIn {\r\n  from { opacity: 0; }\r\n  to { opacity: 1; }\r\n}\r\n\r\n.image-wrapper {\r\n  position: relative;\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  transition: transform 0.3s ease;\r\n  background: #f5f5f5;\r\n  animation: fadeIn 0.5s ease;\r\n}\r\n\r\n.image-wrapper:hover {\r\n  transform: scale(1.05);\r\n}\r\n\r\n.image {\r\n  width: 100%;\r\n  height: auto;\r\n  object-fit: cover;\r\n  display: block;\r\n}\r\n\r\n.image-overlay {\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background-color: rgba(255, 255, 255, 0.7);\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 10px;\r\n  opacity: 0;\r\n  transition: opacity 0.3s ease;\r\n}\r\n\r\n.image-wrapper:hover .image-overlay {\r\n  opacity: 1;\r\n}\r\n\r\n.original-image-button {\r\n  background-color: white;\r\n  border: 1px solid #ddd;\r\n  padding: 5px 10px;\r\n  border-radius: 3px;\r\n  font-size: 12px;\r\n  cursor: pointer;\r\n}\r\n\r\n.loading-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 20px 0;\r\n}\r\n\r\n.loading-spinner {\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 4px solid #f3f3f3;\r\n  border-top: 4px solid #3498db;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n.load-more-trigger {\r\n  height: 40px;\r\n  width: 100%;\r\n  background-color: #f5f5f5;\r\n  border: 1px solid #ddd;\r\n}\r\n\r\n.masonry-grid {\r\n  column-count: 3;\r\n  column-gap: 20px;\r\n  width: 100%;\r\n}\r\n\r\n.masonry-item {\r\n  break-inside: avoid;\r\n  margin-bottom: 20px;\r\n  opacity: 0;\r\n  transition: opacity 0.5s ease;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n@media (max-width: 1024px) {\r\n  .image-grid {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n}\r\n\r\n@media (max-width: 640px) {\r\n  .image-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n</style>","import script from \"./AnimeImageTool.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AnimeImageTool.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./AnimeImageTool.vue?vue&type=style&index=0&id=32514816&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-32514816\"]])\n\nexport default __exports__"],"names":["categories","category","ref","images","isLoading","loadMoreTrigger","observer","capitalizeFirstLetter","string","charAt","toUpperCase","slice","preloadImage","url","Promise","resolve","reject","img","Image","onload","onerror","src","fetchImages","async","value","imagePromises","Array","fill","map","response","fetch","data","json","newImages","all","preloadedImages","allSettled","validImages","filter","result","status","includes","uniqueNewImages","error","console","setupIntersectionObserver","resetImages","openOriginalImage","window","open","handleImageLoad","event","target","wrapper","closest","style","opacity","handleImageError","alt","IntersectionObserver","entries","isIntersecting","root","document","body","threshold","rootMargin","observe","onMounted","onUnmounted","unobserve","__exports__"],"sourceRoot":""}